local protoc = require("proto.editor_scripts.protoc")
local generator = require("proto.editor_scripts.generator")

local M = {}

local function ends_with(str, ending)
	return ending == "" or str:sub(-#ending) == ending
end


local function save_file_from_dependency(dependency_file_path, output_file_path)
	local content = editor.get(dependency_file_path, "text")
	local file, err = io.open(output_file_path, "w")
	if not file then
		print("Error:", err)
		return false
	end

	file:write(content)
	file:close()
	print("Write file at", output_file_path)
	return true
end

---Check if the given path is a directory.
---@param path string
---@return boolean
local function is_dir(path)
	local f = io.open(path, "r")
	if not f then
		return false
	end

	local _, _, code = f:read(1)
	f:close()
	return code == 21
end


local function main(path)
	local folder_path = path:match("(.*/)")

	-- Remove last slash if it exists
	if folder_path:sub(-1) == "/" then
		folder_path = folder_path:sub(1, -2)
	end
	local file_name = path:match(".*/(.*)")

	print("    - Folder:", folder_path)
	print("    - File:", file_name)

	protoc.include_imports = true
	local protoc_instance = protoc.new()
	protoc_instance:addpath(folder_path)
	protoc_instance:parsefile(folder_path .. "/" .. file_name)

	local annotations_data = generator.generate(protoc_instance.loaded)

	-- Write to "annotations.lua"
	local annotations_file_name = "/" .. file_name:match("(.*)%..*") .. "_annotations.lua"
	local file, err = io.open("." .. folder_path .. annotations_file_name, "w")
	if not file then
		print("Error:", err)
		return false
	end

	file:write(annotations_data)
	file:close()
	
	print("    - Write annotations to", annotations_file_name)
end


function M.get_commands()
	return {
		{
			label = "Generate annotations",

			locations = { "Assets" },

			query = {
				selection = {type = "resource", cardinality = "one"}
			},

			active = function(opts)
				local path = editor.get(opts.selection, "path")
				return ends_with(path, ".lua") or ends_with(path, ".proto")
			end,

			run = function(opts)
				local path = editor.get(opts.selection, "path")
				print("Generate annotations for", path)
				main(path)
				return {}
			end
		}
	}
end


return M